// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String  @unique
  hash      String
  firstName String?
  lastName  String?

  comments Comment[]
  likes    Like[]

  @@map("users")
}

model Album {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title          String
  albumType      AlbumType @default(ALBUM)
  releaseAt      DateTime
  spotifyAlbumId String?
  artist         Artist[]
  tracks         Track[]
  comments       Comment[]

  @@map("albums")
}

model Artist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name            String
  spotifyArtistId String?
  albums          Album[]

  @@map("artists")
}

model Track {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Album Album[]

  @@map("tracks")
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content   String?
  isDeleted Boolean @default(false)
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  albumId   Int
  album     Album   @relation(fields: [albumId], references: [id])
  likes     Like[]

  @@map("comments")
}

model Like {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])

  @@id([userId, commentId])
}

enum AlbumType {
  ALBUM
  SINGLE
  COMPILATION
}
